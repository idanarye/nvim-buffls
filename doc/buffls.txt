================================================================================
BuffLS - Buffer Specific null-ls Source                                 *buffls*

BuffLS is a null-ls source for adding LSP-like functionality for a specific
buffer. This is useful for small scripts that use Neovim buffers for input,
and want to enhance their UX with things like custom completion or code
actions. Writing a separate null-ls source for each such script is too
cumbersome, so BuffLS acts as a single source that redirects the LSP
requests to objects stored in a buffer variable.

BuffLS was created as a supplemental plugin for Moonicipal
(https://github.com/idanarye/nvim-moonicipal), but can be used independent
of it.

================================================================================
Table of Contents                                              *buffls.contents*

BuffLS - Buffer Specific null-ls Source·································|buffls|
BuffLS setup······················································|buffls-setup|
BuffLS basic usage··········································|buffls-basic-usage|
BuffLS based on TreeSitter queries··································|BufflsTsLs|
TS-based router for specific LSP request type··············|BufflsTsQueryRouter|
TS-based context for handling LSP request··········|BufflsTsQueryHandlerContext|
BuffLS for Bash buffer···········································|BufflsForBash|

================================================================================
BuffLS setup                                                      *buffls-setup*

Register the BuffLS source in null-ls:
>
    require'null-ls'.setup {
        sources = {
            require'buffls',
        };
    }
<

================================================================================
BuffLS basic usage                                          *buffls-basic-usage*

1. Create a buffer and set it to the appropriate langauge
2. Create a BuffLS for that buffer: >
       local bufnr = vim.api.nvim_get_current_buf()
       local ls = require'buffls.TsLs':for_buffer(bufnr)
<   Choose the appropriate BuffLS class:
   - *BufflsTsLs* for using manually written TreeSitter queries. (like in
     the example)
   - *BufflsForBash* - a subclass of *BufflsTsLs* with helpers that work
     with Bash flags.
   - Custom and/or 3rd party subclasses?
3. Use `ls` to configure the BuffLS behavior for that buffer (see the
   documentation of `ls`'s class)

================================================================================
BuffLS based on TreeSitter queries                                  *BufflsTsLs*

BufflsTsLs                                                          *BufflsTsLs*
    A BuffLS that uses TreeSitter queries. It has |BufflsTsQueryRouter| fields
    for adding handlers directly, which must return their output in null-ls'
    format. It also provides helper methods for when that structure is too
    complicated for basic usage (e.g. - for code actions just giving a name and
    function is often enough for most of BuffLS' use cases)

    Fields: ~
        {language}     (string)               the language for TS queries
        {actions}      (BufflsTsQueryRouter)  handles LSP code actions
        {diagnostics}  (BufflsTsQueryRouter)  handles LSP diagnostics
        {formatting}   (BufflsTsQueryRouter)  handles LSP formatting
        {hover}        (BufflsTsQueryRouter)  handles LSP hover (sig&doc preview)
        {completion}   (BufflsTsQueryRouter)  handles LSP completion


BufflsTsLs:new({language})                                      *BufflsTsLs:new*
    Create a BuffLS without a buffer. The specified language must be
    installed (see |:TSInstall|). |BufflsTsLs:for_buffer| is usually preferred.

    Parameters: ~
        {language}  (string)  the language for TS queries

    Returns: ~
        (BufflsTsLs)


BufflsTsLs:for_buffer({bufnr?})                          *BufflsTsLs:for_buffer*
    Assign a BuffLS to a buffer. Can be called on an existing BuffLS, or on the
    class itself to create a new langauge server and immediately attach it to a
    buffer. In the latter case, the BuffLS will use the 'filetype' of the buffer
    as its `langauge`.

    Parameters: ~
        {bufnr?}  (integer)  the buffer number. Leave empty for current buffer.

    Returns: ~
        (BufflsTsLs)


BufflsTsLs:add_action({title}, {action})                 *BufflsTsLs:add_action*

    Parameters: ~
        {title}   (string)    the text to display to the use when choosing actions
        {action}  (function)  the action itself


                                   *BufflsTsLs:add_completions_direct_generator*
BufflsTsLs:add_completions_direct_generator()
    Register a function that generates a list of code completions.

    Unlike null-ls' format, here the generator does not need to put the
    completions under an `items` field.


                                       *BufflsTsLs:add_completions_ts_generator*
BufflsTsLs:add_completions_ts_generator()
    Register a function that generates a list of code completions only when the
    cursor position matches the TreeSitter query.

    Unlike null-ls' format, here the generator does not need to put the
    completions under an `items` field.

    Refer to |BufflsTsQueryRouter:add_ts_generator| to learn how TreeSitter
    queries interface with `BufflsTsLs` generators.


================================================================================
TS-based router for specific LSP request type              *BufflsTsQueryRouter*

BufflsTsQueryRouter                                        *BufflsTsQueryRouter*
    Responsible for a single type of LSP request that a |BufflsTsLs| handles.
    For each such request, it'll run all the generators registered on it can
    concatenate their results.

    Fields: ~
        {language}  (string)  the language for TS queries


                                      *BufflsTsQueryRouter:add_direct_generator*
BufflsTsQueryRouter:add_direct_generator({generator})
    Register a function that receives the parameters object from null-ls and
    returns a result in null-ls' format. This means that it needs to return a
    list of results.

    Parameters: ~
        {generator}  (function)


                                          *BufflsTsQueryRouter:add_ts_generator*
BufflsTsQueryRouter:add_ts_generator({query}, {generator})
    Register a |BufflsTsGenerator| that runs only when the specified query
    matches the cursor's position.

    A query matches the cursor position if one of these two things happen:
     - The cursor is on a node that the query captures using `@HERE`.
     - The cursor is after a node that the query captures using `@AFTER_HERE`.

    Parameters: ~
        {query}      (string)             a TreeSitter query
        {generator}  (BufflsTsGenerator)


BufflsTsGenerator                                            *BufflsTsGenerator*
    A function that receives a |BufflsTsQueryHandlerContext| and responds to a
    particualr LSP request type using null-ls format. This means that it needs
    to return a list of results.

    Type: ~
        fun(ctx:BufflsTsQueryHandlerContext):table[]


================================================================================
TS-based context for handling LSP request          *BufflsTsQueryHandlerContext*

BufflsTsQueryHandlerContext                        *BufflsTsQueryHandlerContext*

    Fields: ~
        {params}  (table)
        {tstree}  (userdata)
        {nodes}   ()


BufflsTsQueryHandlerContext:text({node})      *BufflsTsQueryHandlerContext:text*

    Parameters: ~
        {node}  (userdata|string)  The TreeSitter node to resolve, or the name of that match in self.nodes
                                   @return string?


                                  *BufflsTsQueryHandlerContext:is_node_in_range*
BufflsTsQueryHandlerContext:is_node_in_range({node})

    Parameters: ~
        {node}  (userdata|string)  The TreeSitter node to resolve, or the name of that match in self.nodes

    Returns: ~
        (boolean)


                                     *BufflsTsQueryHandlerContext:is_after_node*
BufflsTsQueryHandlerContext:is_after_node()


================================================================================
BuffLS for Bash buffer                                           *BufflsForBash*

BufflsForBash                                                    *BufflsForBash*


BufflsForBash:add_flag({flag}, {args?})                 *BufflsForBash:add_flag*

    Parameters: ~
        {flag}   (string|string[])
        {args?}  (string|table[]|function)


BufflsForBash:new()                                          *BufflsForBash:new*

    Returns: ~
        (BufflsForBash)


vim:tw=78:ts=8:noet:ft=help:norl:
